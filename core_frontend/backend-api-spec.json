{
  "openapi": "3.1.0",
  "info": {
    "title": "Connector Framework Manager API",
    "description": "API for managing connectors, connections, and OAuth flows for third-party service integrations",
    "version": "1.0.0"
  },
  "paths": {
    "/api/connectors/": {
      "get": {
        "tags": [
          "connectors"
        ],
        "summary": "List Connectors",
        "description": "List all available connectors from plugins and database.\n\nReturns a combined list of connectors from the plugin system\nand any additional connectors stored in the database.",
        "operationId": "list_connectors_api_connectors__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectorResponse"
                  },
                  "type": "array",
                  "title": "Response List Connectors Api Connectors  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "connectors"
        ],
        "summary": "Create Connector",
        "description": "Create a new connector in the database.\n\nThis endpoint allows storing custom connector configurations\nthat extend beyond the built-in plugins.\n\nArgs:\n    connector_data: Connector configuration data\n    \nReturns:\n    Created connector information",
        "operationId": "create_connector_api_connectors__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "title": "Connector Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/connectors/{connector_key}": {
      "get": {
        "tags": [
          "connectors"
        ],
        "summary": "Get Connector",
        "description": "Get detailed information about a specific connector.\n\nArgs:\n    connector_key: Unique identifier for the connector\n    \nReturns:\n    Detailed connector information including configuration schema",
        "operationId": "get_connector_api_connectors__connector_key__get",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "connectors"
        ],
        "summary": "Update Connector",
        "description": "Update an existing connector in the database.\n\nArgs:\n    connector_key: Unique identifier for the connector\n    connector_data: Updated connector configuration data\n    \nReturns:\n    Updated connector information",
        "operationId": "update_connector_api_connectors__connector_key__put",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "title": "Connector Data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "connectors"
        ],
        "summary": "Delete Connector",
        "description": "Delete a connector from the database.\n\nNote: This only removes the database record, not the plugin implementation.\n\nArgs:\n    connector_key: Unique identifier for the connector",
        "operationId": "delete_connector_api_connectors__connector_key__delete",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/connections/": {
      "get": {
        "tags": [
          "connections"
        ],
        "summary": "List Connections",
        "description": "List all connections for the authenticated user.\n\nReturns:\n    List of user's connections with connector details",
        "operationId": "list_connections_api_connections__get",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionResponse"
                  },
                  "title": "Response List Connections Api Connections  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "connections"
        ],
        "summary": "Create Connection",
        "description": "Create a new connection for the authenticated user.\n\nArgs:\n    connection_data: Connection creation data\n    \nReturns:\n    Created connection details",
        "operationId": "create_connection_api_connections__post",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/connections/{connection_id}": {
      "get": {
        "tags": [
          "connections"
        ],
        "summary": "Get Connection",
        "description": "Get a specific connection by ID.\n\nArgs:\n    connection_id: Connection ID\n    \nReturns:\n    Connection details",
        "operationId": "get_connection_api_connections__connection_id__get",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Connection Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "connections"
        ],
        "summary": "Update Connection",
        "description": "Update an existing connection.\n\nArgs:\n    connection_id: Connection ID\n    connection_data: Connection update data\n    \nReturns:\n    Updated connection details",
        "operationId": "update_connection_api_connections__connection_id__put",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Connection Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "connections"
        ],
        "summary": "Delete Connection",
        "description": "Delete a connection.\n\nArgs:\n    connection_id: Connection ID",
        "operationId": "delete_connection_api_connections__connection_id__delete",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Connection Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/connections/{connection_id}/test": {
      "post": {
        "tags": [
          "connections"
        ],
        "summary": "Test Connection",
        "description": "Test a connection to verify it's working properly.\n\nArgs:\n    connection_id: Connection ID\n    \nReturns:\n    Test result with success status and sample data",
        "operationId": "test_connection_api_connections__connection_id__test_post",
        "parameters": [
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Connection Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Test Connection Api Connections  Connection Id  Test Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth/{connector_key}/authorize": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Initiate OAuth",
        "description": "Initiate OAuth authorization flow for a connector and return authorization URL and signed state.",
        "operationId": "initiate_oauth",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          },
          {
            "name": "connection_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Existing connection ID to associate with OAuth",
              "title": "Connection Id"
            },
            "description": "Existing connection ID to associate with OAuth"
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthAuthorizeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth/{connector_key}/callback": {
      "get": {
        "tags": [
          "oauth"
        ],
        "summary": "Handle OAuth callback GET",
        "description": "Handle OAuth callback via GET with code and state",
        "operationId": "handle_oauth_callback_get",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "State"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error"
            }
          },
          {
            "name": "error_description",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Error Description"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "Handle OAuth callback POST",
        "description": "Handle OAuth callback via POST with code and state",
        "operationId": "handle_oauth_callback_post",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuthCallbackRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthCallbackResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/oauth/{connector_key}/revoke/{connection_id}": {
      "delete": {
        "tags": [
          "oauth"
        ],
        "summary": "Revoke OAuth token",
        "description": "Revoke stored OAuth tokens for a specific connection",
        "operationId": "revoke_oauth_token",
        "parameters": [
          {
            "name": "connector_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Connector Key"
            }
          },
          {
            "name": "connection_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Connection Id"
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Authorization"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint for monitoring service availability.\n\nReturns:\n    Dict: Service health status",
        "operationId": "health_check__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Liveness Probe",
        "description": "Liveness probe endpoint for container orchestration.\n\nReturns:\n    Dict: Liveness status",
        "operationId": "liveness_probe_healthz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/readyz": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Readiness Probe",
        "description": "Readiness probe endpoint for container orchestration.\n\nReturns:\n    Dict: Readiness status",
        "operationId": "readiness_probe_readyz_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Api Health Check",
        "description": "API health check endpoint.\n\nReturns:\n    Dict: API health status with version info",
        "operationId": "api_health_check_api_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConnectionCreate": {
        "properties": {
          "connector_key": {
            "type": "string",
            "title": "Connector Key",
            "description": "Connector key identifier"
          },
          "config_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Data",
            "description": "Connector configuration data"
          }
        },
        "type": "object",
        "required": [
          "connector_key"
        ],
        "title": "ConnectionCreate",
        "description": "Request model for creating a connection."
      },
      "ConnectionResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Connection ID"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id",
            "description": "Owner user ID"
          },
          "connector_id": {
            "type": "integer",
            "title": "Connector Id",
            "description": "Associated connector ID"
          },
          "connector": {
            "$ref": "#/components/schemas/ConnectorResponse",
            "description": "Connector details"
          },
          "config_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Data",
            "description": "Saved connector configuration"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Connection status"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp"
          },
          "has_oauth_token": {
            "type": "boolean",
            "title": "Has Oauth Token",
            "description": "Whether an OAuth token is stored for this connection",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "connector_id",
          "connector",
          "status",
          "created_at"
        ],
        "title": "ConnectionResponse",
        "description": "Response model for connection information."
      },
      "ConnectionUpdate": {
        "properties": {
          "config_data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Data",
            "description": "Connector configuration data"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "description": "Connection status"
          }
        },
        "type": "object",
        "title": "ConnectionUpdate",
        "description": "Request model for updating a connection."
      },
      "ConnectorResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Connector ID"
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Connector unique key"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Connector display name"
          },
          "config_schema": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config Schema",
            "description": "JSON schema for connector configuration"
          },
          "supports_oauth": {
            "type": "boolean",
            "title": "Supports Oauth",
            "description": "Whether the connector supports OAuth"
          },
          "oauth_scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Oauth Scopes",
            "description": "List of OAuth scopes required by connector"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "key",
          "name",
          "supports_oauth",
          "created_at"
        ],
        "title": "ConnectorResponse",
        "description": "Response model for connector information."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "OAuthAuthorizeResponse": {
        "properties": {
          "authorization_url": {
            "type": "string",
            "title": "Authorization Url",
            "description": "URL to redirect the user for OAuth"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "Signed state token for OAuth CSRF protection"
          }
        },
        "type": "object",
        "required": [
          "authorization_url",
          "state"
        ],
        "title": "OAuthAuthorizeResponse",
        "description": "Response model for OAuth authorization initiation."
      },
      "OAuthCallbackRequest": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code",
            "description": "Authorization code from provider"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "State token returned by provider"
          },
          "connection_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connection Id",
            "description": "Optional connection to attach tokens to"
          }
        },
        "type": "object",
        "required": [
          "code",
          "state"
        ],
        "title": "OAuthCallbackRequest",
        "description": "Request model for OAuth callback handling."
      },
      "OAuthCallbackResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the OAuth process succeeded"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Human-readable status message"
          },
          "connection_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Connection Id",
            "description": "Connection ID if tokens were stored"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "OAuthCallbackResponse",
        "description": "Response model for OAuth callback completion."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  },
  "tags": [
    {
      "name": "connectors",
      "description": "Operations for managing connector definitions and plugin information"
    },
    {
      "name": "connections",
      "description": "Operations for managing user connections to connectors"
    },
    {
      "name": "oauth",
      "description": "OAuth authorization flows for connector authentication"
    },
    {
      "name": "health",
      "description": "Health and readiness probes"
    }
  ]
}